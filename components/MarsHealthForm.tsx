"use client";
import { useState, useMemo } from "react";

interface FormData {
┬а biologicalSex: "Male" | "Female" | "";
┬а age: string;
┬а heightMass: string;
┬а sleep: string;
┬а medicalCondition: string;
}

interface AssessmentResult {
┬а survivalChance: string;
┬а improvements: string;
┬а medicalConcern: string;
}

const questions = [
┬а {
┬а ┬а id: "biologicalSex",
┬а ┬а label: "Biological Sex",
┬а ┬а subLabel: "Personalize Your Journey", // New subLabel for the main title
┬а ┬а placeholder: "Choose your biological sex",
┬а ┬а type: "select",
┬а ┬а options: ["Male", "Female"]
┬а },
┬а {
┬а ┬а id: "age",
┬а ┬а label: "Age",
┬а ┬а subLabel: "Personalize Your Journey",
┬а ┬а placeholder: "Enter your age in years (18-80)",
┬а ┬а type: "number",
┬а ┬а min: 18,
┬а 	 max: 80,
┬а },
┬а {
┬а ┬а id: "heightMass",
┬а ┬а label: "Height & Mass",
┬а ┬а subLabel: "Personalize Your Journey",
┬а ┬а placeholder: "Enter height in cm, then mass in kg (e.g., 175, 70)",
┬а ┬а type: "text"
┬а },
┬а {
┬а ┬а id: "sleep",
┬а ┬а label: "Hours of Sleep/Day",
┬а ┬а subLabel: "Personalize Your Journey",
┬а ┬а placeholder: "Average hours of sleep per day (0-24)",
┬а ┬а type: "number",
┬а ┬а min: 0,
┬а ┬а max: 24,
┬а },
┬а {
┬а ┬а id: "medicalCondition",
┬а ┬а label: "Medical Condition",
┬а ┬а subLabel: "Personalize Your Journey",
┬а ┬а placeholder: "Describe any medical conditions (or 'none' if none)",
┬а ┬а type: "text"
┬а }
];

export default function MarsHealthForm() {
┬а const [currentQuestion, setCurrentQuestion] = useState(0);
┬а const [formData, setFormData] = useState<FormData>({
┬а ┬а biologicalSex: "",
┬а ┬а age: "",
┬а ┬а heightMass: "",
┬а ┬а sleep: "",
┬а ┬а medicalCondition: "",
┬а });
┬а const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [, setResults] = useState<AssessmentResult | null>(null);

┬а const handleInputChange = (value: string) => {
┬а ┬а const questionId = questions[currentQuestion].id as keyof FormData;
┬а ┬а setFormData(prev => ({
┬а ┬а ┬а ...prev,
┬а ┬а ┬а [questionId]: value
┬а ┬а }));
┬а };

┬а const calculateBMI = (heightMass: string) => {
┬а ┬а const parts = heightMass.split(',').map(s => parseInt(s.trim()));
┬а ┬а if (parts.length === 2 && !isNaN(parts[0]) && parts[0] > 0 && !isNaN(parts[1]) && parts[1] > 0) {
┬а ┬а ┬а const height_m = parts[0] / 100;
┬а ┬а ┬а const mass = parts[1];
┬а ┬а ┬а return mass / (height_m * height_m);
┬а ┬а }
┬а ┬а return null;
┬а };
┬а 
┬а const currentQuestionData = questions[currentQuestion];
┬а const currentValue = formData[currentQuestionData.id as keyof FormData];

┬а const validation = useMemo(() => {
┬а ┬а let valid = currentValue.trim() !== "";
┬а ┬а let message: string | null = null;
┬а ┬а 
┬а ┬а if (!valid) {
┬а ┬а 	return { valid: false, message: null }; 
┬а ┬а }

┬а ┬а if (currentQuestionData.id === "age") {
┬а ┬а ┬а const age = parseInt(currentValue, 10);
┬а ┬а ┬а const min = currentQuestionData.min!;
┬а ┬а ┬а const max = currentQuestionData.max!;
┬а ┬а ┬а if (isNaN(age)) { valid = false; message = "Age must be a number."; }
┬а ┬а ┬а else if (age < min || age > max) { valid = false; message = `Age must be between ${min} and ${max}.`; }
┬а ┬а } 
┬а ┬а else if (currentQuestionData.id === "sleep") {
┬а ┬а 	const sleep = parseFloat(currentValue);
┬а 	const min = currentQuestionData.min!;
┬а 	const max = currentQuestionData.max!;
┬а 	if (isNaN(sleep)) { valid = false; message = "Sleep hours must be a number."; }
┬а 	else if (sleep < min || sleep > max) { valid = false; message = `Sleep hours must be between ${min} and ${max}.`; }
┬а ┬а }
┬а 	else if (currentQuestionData.id === "heightMass") {
┬а ┬а ┬а const parts = currentValue.split(',').map(s => s.trim());
┬а ┬а ┬а if (parts.length !== 2) {
┬а ┬а ┬а ┬а valid = false;
┬а ┬а ┬а ┬а message = "Please enter two values separated by a comma (Height, Mass).";
┬а ┬а ┬а } else {
┬а ┬а ┬а ┬а const height = parseInt(parts[0]);
┬а ┬а ┬а ┬а const mass = parseInt(parts[1]);
┬а ┬а ┬а ┬а if (isNaN(height) || height <= 0) {
┬а ┬а ┬а ┬а ┬а valid = false;
┬а ┬а ┬а ┬а ┬а message = "Height (first value) must be a positive integer in cm.";
┬а ┬а ┬а ┬а } else if (isNaN(mass) || mass <= 0) {
┬а ┬а ┬а ┬а ┬а valid = false;
┬а ┬а ┬а ┬а ┬а message = "Mass (second value) must be a positive integer in kg.";
┬а ┬а ┬а ┬а }
┬а ┬а ┬а }
┬а ┬а }
┬а 	
┬а 	return { valid, message };
    }, [currentValue, currentQuestionData.id, currentQuestionData.max, currentQuestionData.min]);
┬а 
┬а const canProceed = validation.valid;


┬а const handleSubmit = async () => {
┬а ┬а setIsAnalyzing(true);
┬а ┬а 
┬а ┬а try {
┬а ┬а 	const bmi = calculateBMI(formData.heightMass);
┬а ┬а 	
┬а ┬а 	if (bmi === null) {
┬а ┬а 		throw new Error("Invalid Height and Mass format for BMI calculation.");
┬а ┬а 	}

┬а ┬а 	const submissionData = {
┬а ┬а 		biologicalSex: formData.biologicalSex,
┬а ┬а 		age: parseInt(formData.age, 10),
┬а ┬а 		bmi: parseFloat(bmi.toFixed(1)),
┬а ┬а 		sleep: parseFloat(formData.sleep),
┬а ┬а 		medicalCondition: formData.medicalCondition,
┬а ┬а 	};
┬а 	
┬а 	const response = await fetch("/api/mars-assessment", {
┬а 		method: "POST",
┬а 		headers: { "Content-Type": "application/json" },
┬а 		body: JSON.stringify(submissionData)
┬а 	});
┬а 	
┬а 	if (!response.ok) {
┬а 		const errorText = await response.text();
┬а 		console.error(`HTTP error! Status: ${response.status}`, errorText);
┬а 		throw new Error(`Assessment failed with status ${response.status}.`);
┬а 	}
┬а 	
┬а 	const data = await response.json();
┬а 	setResults(data);
┬а } catch (error) {
┬а 	console.error("Assessment failed:", error);
┬а 	setResults({
┬а 		survivalChance: "Error",
┬а 		improvements: "Could not complete the assessment due to a server error or invalid input. Please try again.",
┬а 		medicalConcern: (error as Error).message || "Unknown error."
┬а 	});
┬а } finally {
┬а 	setIsAnalyzing(false);
┬а }
┬а };

┬а const handleNext = () => {
┬а 	if (!canProceed) return;

┬а 	if (currentQuestion < questions.length - 1) {
┬а ┬а 		setCurrentQuestion(prev => prev + 1);
┬а 	} else {
┬а ┬а 		handleSubmit();
┬а 	}
┬а };

┬а const handlePrevious = () => {
┬а 	if (currentQuestion > 0) {
┬а ┬а 		setCurrentQuestion(prev => prev - 1);
┬а 	}
┬а };

  // resetForm removed (unused in this component)
┬а 
┬а return (
    
┬а ┬а <div className="min-h-screen flex items-center justify-center bg-black text-white relative overflow-hidden">
┬а ┬а ┬а <div className="absolute inset-0 bg-gradient-to-tl from-orange-800 to-black opacity-30 z-0"></div>

┬а ┬а ┬а <div className="relative z-10 p-8 max-w-4xl w-full mx-auto">
┬а ┬а ┬а ┬а <div className="flex items-center space-x-6">
┬а ┬а ┬а ┬а ┬а {/* Large Question Number */}
┬а ┬а ┬а ┬а ┬а <div className="text-[10rem] font-bold leading-none text-white opacity-100 select-none">
┬а ┬а ┬а ┬а ┬а ┬а {currentQuestion + 1}
┬а ┬а ┬а ┬а ┬а </div>

          <div className="h-100 w-2 bg-white opacity-100 self-center"></div>
┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а <div className="flex-1"> 
            {/* Sub-label / Main Title */}
            <p className="text-gray-300 text-3xl font-light mb-2">
              {currentQuestionData.subLabel}
            </p>
            {/* Question Label */}
            <h2 className="text-7xl font-bold text-white mb-8">
              {currentQuestionData.label}
            </h2>

┬а ┬а ┬а ┬а ┬а ┬а {/* Input Field */}
┬а ┬а ┬а ┬а ┬а ┬а <div className="w-96"> {/* Container to control width for both types */}
            
            {/* ЁЯЪА GRADIENT BORDER WRAPPER (Outer div) */}
            <div className="p-[4px] rounded-lg bg-gradient-to-r from-red-500 via-blue-500 to-orange-500">
                
                {currentQuestionData.type === "select" ? (
                    <select
                        value={currentValue}
                        onChange={(e) => handleInputChange(e.target.value)}
                        // Inner element has white background and dark text
                        className="w-full p-4 pr-10 text-xl bg-white text-gray-900 rounded-lg focus:outline-none appearance-none text-left"
                        // Custom arrow needs to be dark for the white background
                        style={{ backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%231F2937'%3e%3cpath fill-rule='evenodd' d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z' clip-rule='evenodd' /%3e%3c/svg%3e")`, backgroundRepeat: 'no-repeat', backgroundPosition: 'right 1rem center', backgroundSize: '1.5em' }}
                    >
                        <option value="" disabled className="text-gray-500">{currentQuestionData.placeholder}</option>
                        {currentQuestionData.options?.map((option) => (
                            <option key={option} value={option} className="text-gray-900">
                                {option}
                            </option>
                        ))}
                    </select>
                ) : (
                    <input
                        type={currentQuestionData.type === "number" ? "number" : "text"}
                        value={currentValue}
                        onChange={(e) => handleInputChange(e.target.value)}
                        placeholder={currentQuestionData.placeholder}
                        // Inner element has white background and dark text
                        className="w-full p-4 text-xl bg-white text-gray-900 rounded-lg placeholder-gray-500 focus:outline-none transition-all duration-300"
                        {...(currentQuestionData.type === "number" && { step: "any" })}
                    />
                )}
            </div>
        </div>
┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а {/* Validation Error Display */}
┬а ┬а ┬а ┬а {validation.message && (
┬а ┬а ┬а ┬а ┬а <p className="text-red-400 text-sm mt-4 text-center">
┬а ┬а ┬а ┬а ┬а ┬а тЪая╕П {validation.message}
┬а ┬а ┬а ┬а ┬а </p>
┬а ┬а ┬а ┬а )}

┬а ┬а ┬а ┬а {/* Navigation Buttons */}
┬а ┬а ┬а ┬а <div className="flex justify-between mt-16">
┬а ┬а ┬а ┬а ┬а <button
┬а ┬а ┬а ┬а ┬а ┬а onClick={handlePrevious}
┬а ┬а ┬а ┬а ┬а ┬а disabled={currentQuestion === 0 || isAnalyzing}
┬а ┬а ┬а ┬а ┬а ┬а className="px-8 py-4 bg-gray-800 text-gray-300 text-lg rounded-lg hover:bg-gray-700 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300"
┬а ┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ┬а тЖР Previous
┬а ┬а ┬а ┬а ┬а </button>

┬а ┬а ┬а ┬а ┬а {isAnalyzing ? (
┬а ┬а ┬а ┬а ┬а ┬а <div className="flex items-center space-x-3 px-10 py-4 bg-red-600 text-white text-lg rounded-lg">
┬а ┬а ┬а ┬а ┬а ┬а ┬а <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-white"></div>
             <span>Analyzing...</span>
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а <button
┬а ┬а ┬а ┬а ┬а ┬а ┬а onClick={handleNext}
┬а ┬а ┬а ┬а ┬а ┬а ┬а disabled={!canProceed}
┬а ┬а ┬а ┬а ┬а ┬а ┬а className="px-10 py-4 bg-red-600 text-white text-lg font-bold rounded-lg hover:bg-red-700 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105"
┬а ┬а ┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ┬а ┬а {currentQuestion === questions.length - 1 ? "Take Off" : "Next тЖТ"}
┬а ┬а ┬а ┬а ┬а ┬а </button>
┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </div>
┬а ┬а </div>
┬а );
}